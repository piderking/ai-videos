import os, requests
import json
import re
import requests
import random

# Fore testing $ENV:URLS="https://www.reddit.com/r/AmItheAsshole/comments/1bzq7j5/aita_for_naming_my_son_after_my_father_instead_of/"
links = os.environ.get("URLS").split(";")
# ENVIRONMENT VARIABLES (TODO Make these call from Enviroment)
DURATION=20 # Seconds

print(links)

# JSON Data from Reddit
#table = requests.get("https://www.reddit.com/r/AmItheAsshole/hot.json",).json()
table = json.loads(open("hot.json", "r").read())


# Where all the titles/text will be generated to
titles = []
texts = []

# HTTP Headers for 11 Labs
headers = {
  "Accept": "audio/mpeg",
  "Content-Type": "application/json",
  "xi-api-key": "c798607f1c366ac93066a74e50a10d4f"
}
CHUNK_SIZE = 2048
# Functions

def addCustomStyles(count: int):
    f = open("data/{}/subs.ass".format(count), "r")

    # Use the Custom Styles

    temp = """[Script Info]
    ; Script generated by FFmpeg/Lavc61.3.100
    ScriptType: v4.00+
    PlayResX: 384
    PlayResY: 288
    ScaledBorderAndShadow: yes
    YCbCr Matrix: None

    [V4+ Styles]
    Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
    Style: Default,Roboto,16,&Hffffff,&Hffffff,&H0,&H0,0,0,0,0,100,100,0,0,0,1,0,2,10,10,120,1

    [Events]{}""".format(f.read().split("[Events]")[1])

    w = open("data/{}/subs.ass".format(count), "w")
    w.write(temp)

# Start of Scripting---------
for tabe in table["data"]["children"]:
    if tabe["data"]["url"] in links: # Only do articles where the URL is provided
        titles.append(tabe["data"]["title"])
        texts.append(tabe["data"]["selftext"])
        
        


for count, text in enumerate(texts):
    if not os.path.exists("data/{}".format(count)):
        os.mkdir("data/{}".format(count))
    characters = int(255 * (DURATION/30))
    print(characters)
    data = {
    "text": text[:characters], # Word Count
    "model_id": "eleven_monolingual_v1",
    "voice_settings": {
        "stability": 0.5,
        "similarity_boost": 0.5
    }
    }

    if not os.path.exists("data/{}/tts.mp3".format(count)):
        print("Downloading New Recording")
        response = requests.post("https://api.elevenlabs.io/v1/text-to-speech/j9jfwdrw7BRfcR43Qohk", json=data, headers=headers)
        with open("data/{}/tts.mp3".format(count), 'wb') as f:
            for chunk in response.iter_content(chunk_size=CHUNK_SIZE):
                if chunk:
                    f.write(chunk)
    print("Voice Recordings: {} Finished".format(count))


# Print Texts
for count, text in enumerate(texts):

    # Download Pexel Videos
    if not os.path.exists("data/{}/video.mp4".format(count)):
        print("Video: {} Doesn't Exsists".format(count))

        r = requests.get("https://api.pexels.com/videos/search?query=nature&per_page=4&orientation=portrait", headers={'Authorization': 'p1p0I9iC7ChShttx4Z29WDLsyfW6V6mSm05l0cE0evnxyYckEdCFqkEl'})


        ri = requests.get("https://api.pexels.com/videos/videos/{}".format(r.json()["videos"][random.randint(0, len(r.json()["videos"])-1)]["id"]), headers={'Authorization': 'p1p0I9iC7ChShttx4Z29WDLsyfW6V6mSm05l0cE0evnxyYckEdCFqkEl'})
        for i in ri.json()["video_files"]:
            if i["quality"] == "hd" and i["width"] == 1080:
                ro = requests.get(i["link"], headers={'Authorization': 'p1p0I9iC7ChShttx4Z29WDLsyfW6V6mSm05l0cE0evnxyYckEdCFqkEl'})
                # print(r.text)

                with open("data/{}/video.mp4".format(count),'wb') as f:
                  f.write(ro.content)

            print("Video: {} Finished Downloading".format(count))
    else:
        print("Video: {} Already Exsists".format(count))
    # Remove Audio and Crop Video
    if os.path.exists("data/{}/video.mp4".format(count)) and not os.path.exists("data/{}/video_soundless.mp4".format(count)):
        os.system('ffmpeg -i data/{}/video.mp4 -vf "scale=-1:1920, crop=1080:1920:656.25:0" -an data/{}/video_soundless.mp4'.format(count, count))
    else:
        print("Cropped Video: {} Already Exsists".format(count))

    # Loop 
    if os.path.exists("data/{}/video_soundless.mp4".format(count)) and not os.path.exists("data/{}/video_soundless_loop.mp4".format(count)):
        os.system("ffmpeg -stream_loop -1 -i data/{}/video_soundless.mp4 -t {}s -c copy data/{}/video_soundless_loop.mp4".format(count, DURATION, count))
    else:
        print("Looped and Soundless Video: {} Already Exsists".format(count))
    # Add TTS to Soundless Video
    if os.path.exists("data/{}/tts.mp3".format(count)) and os.path.exists("data/{}/video_soundless_loop.mp4".format(count)) and not os.path.exists("data/{}/video_tts_loop.mp4".format(count)):
        os.system("ffmpeg -i data/{}/video_soundless_loop.mp4 -i data/{}/tts.mp3 -t {}s -y data/{}/video_tts_loop.mp4".format(count, count , DURATION, count)) 
    else:
        print("TTS Video: {} Already Exsists".format(count))

    # Build SRT Subtitles
    if os.path.exists("data/{}/video_tts_loop.mp4".format(count)) and not os.path.exists("data/{}/subs.srt".format(count)):
        os.system('vosk-transcriber -i data/{}/video_tts_loop.mp4 -t srt -o data/{}/subs.srt'.format(count, count))
    else:
        print("Subtitles: {} Already Exsists".format(count))

    # Translation of SRT Subtitles
    if os.path.exists("data/{}/subs.srt".format(count)) and not os.path.exists("data/{}/subs.ass".format(count)):
        os.system('ffmpeg -i data/{}/subs.srt data/{}/subs.ass'.format(count, count))
    else:
        print("ASS Subtitles: {} Already Exsists".format(count))
    
    # Customize .ass Styles
    if os.path.exists("data/{}/subs.ass".format(count)):
        addCustomStyles(count) # Add Premade Header to generated files
    else:
        print("Something Has to Be Wrong in Custom ASS {}".format(count))

    # Add SRT Subtitles
    if os.path.exists("data/{}/subs.ass".format(count)) and os.path.exists("data/{}/video_tts_loop.mp4".format(count)) and not os.path.exists("build/output-{}.mp4".format(count)):
        os.system('ffmpeg -i data/{}/video_tts_loop.mp4 -vf ass=data/{}/subs.ass build/output-{}.mp4'.format(count, count, count))
    else:
        print("Finalized Video: {} Already Exsists".format(count))


